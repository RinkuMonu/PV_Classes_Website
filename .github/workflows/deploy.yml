name: Deploy Next.js (pvclasses.in) to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🛠 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 1. Install deps & build prod bundle on GitHub runner
      - name: 📦 Install & Build Next.js
        run: |
          npm install --legacy-peer-deps
          npm run build

          # we only need runtime files on server, not git history etc
          tar --exclude='.git' \
              --exclude='.github' \
              --exclude='node_modules' \
              -czvf pvclasses_site_code.tar.gz .

      # 2. make a tar just for node_modules too (so server doesn't re-run npm i)
      - name: 📦 Pack node_modules after build
        run: |
          tar -czvf node_modules.tar.gz node_modules

      # 3. Write SSH key from secret to file (only used internally by action if needed)
      - name: 🔑 Prepare SSH Key file
        run: |
          echo "${{ secrets.NEXT4_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      # 4. Upload both tarballs to server
      - name: 🚀 Upload build artifacts to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.NEXT4_SSH_HOST }}
          username: ${{ secrets.NEXT4_SSH_USER }}
          port: ${{ secrets.NEXT4_SSH_PORT }}
          key: ${{ secrets.NEXT4_SSH_KEY }}
          source: |
            pvclasses_site_code.tar.gz
            node_modules.tar.gz
          target: /home/pvclasses.in/

      # 5. SSH into server: backup, deploy, restore .env, restart PM2
      - name: 🔄 Deploy on EC2 & restart PM2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.NEXT4_SSH_HOST }}
          username: ${{ secrets.NEXT4_SSH_USER }}
          port: ${{ secrets.NEXT4_SSH_PORT }}
          key: ${{ secrets.NEXT4_SSH_KEY }}
          script: |
            set -e

            APP_DIR="/home/pvclasses.in/PV_Classes_Website-main"
            TMP_CODE_TAR="/home/pvclasses.in/pvclasses_site_code.tar.gz"
            TMP_NODE_TAR="/home/pvclasses.in/node_modules.tar.gz"
            BACKUP_BASE="/home/pvclasses.in/deploy_backups"
            TS=$(date +%Y%m%d_%H%M%S)

            echo "📁 Making sure backup dir exists"
            mkdir -p $BACKUP_BASE

            echo "🔐 If .env exists, back it up temporarily"
            if [ -f "$APP_DIR/.env" ]; then
              cp "$APP_DIR/.env" "/home/pvclasses.in/.env_pvclasses_site_backup"
            fi

            echo "💾 Taking snapshot backup of current code"
            cp -r "$APP_DIR" "$BACKUP_BASE/PV_Classes_Website-main_$TS" || true

            echo "🧼 Cleaning old app code (but keeping folder itself)"
            find "$APP_DIR" -mindepth 1 -maxdepth 1 -exec rm -rf {} +

            echo "📦 Extracting new code tar into app dir"
            tar -xzvf "$TMP_CODE_TAR" -C "$APP_DIR"

            echo "📦 Extracting node_modules into app dir"
            tar -xzvf "$TMP_NODE_TAR" -C "$APP_DIR"

            echo "🗑 Removing temp tars"
            rm -f "$TMP_CODE_TAR" "$TMP_NODE_TAR"

            echo "♻ Restoring .env if we had backed it up"
            if [ -f "/home/pvclasses.in/.env_pvclasses_site_backup" ]; then
              mv "/home/pvclasses.in/.env_pvclasses_site_backup" "$APP_DIR/.env"
            fi

            echo "📂 cd into app dir"
            cd "$APP_DIR"

            echo "🔁 Building production .next on server if missing"
            # if .next did not come from tar (we sent .next inside code tar because we ran npm run build before tar),
            # this is normally not needed. but safe fallback:
            if [ ! -d ".next" ]; then
              echo "⚠ .next not found, running build on server as fallback"
              npm install --legacy-peer-deps
              npm run build
            fi

            echo "🚀 Restart PM2 for pvclasses.in site"
            pm2 delete pvclasses.in-site || true
            if [ -f ecosystem.config.js ]; then
              # prefer ecosystem (if it's already configured properly)
              pm2 start ecosystem.config.js --only pvclasses.in || pm2 start ecosystem.config.js
            else
              # fallback: run next manually on port 3006
              pm2 start node_modules/next/dist/bin/next --name pvclasses.in -- start -p 3006
            fi

            echo "💾 Save PM2 boot config"
            pm2 save

            echo "✅ Deployment finished for pvclasses.in-site"
